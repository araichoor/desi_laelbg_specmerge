#!/usr/bin/env python

"""
defines a hp map with reporting if a pixel contains a photometric object.
for odin/n419/cosmos_yr2 only.
"""

import os
import fitsio
import numpy as np
from astropy.table import Table
import healpy as hp
from desihiz.hizmerge_io import (
    allowed_imgs,
    get_img_cases,
    get_img_bands,
    get_phot_fns,
)
from argparse import ArgumentParser


def parse():
    parser = ArgumentParser()
    parser.add_argument(
        "--outfn",
        help="output fits filename (default=None)",
        type=str,
        required=True,
        default=None,
    )
    parser.add_argument(
        "--bb",
        help="broad-band imaging; for odin-only (default=HSC)",
        type=str,
        choices=["HSC", "LS"],
        default="HSC",
    )
    parser.add_argument(
        "--nside",
        help="hp nside (default=8192)",
        type=int,
        default=8192,
    )
    parser.add_argument(
        "--overwrite",
        help="overwrite files",
        action="store_true",
    )
    args = parser.parse_args()
    for kwargs in args._get_kwargs():
        print(kwargs)
    return args


def main():

    args = parse()

    img, band, case = "odin", "N419", "cosmos_yr2"
    nest = True

    # AR photometry catalog
    photfns = get_phot_fns(img, case, band)
    if args.bb == "HSC":
        photfn = [_ for _ in photfns if "_HSC_" in _][0]
    if args.bb == "LS":
        photfn = [_ for _ in photfns if "_DR10_" in _][0]
    d = Table(fitsio.read(photfn))

    # AR cut on brick_primary and maskbits
    sel = d["brick_primary"]
    sel &= d["maskbits"] == 0
    d = d[sel]

    # AR cut on nobs
    if args.bb == "HSC":
        bands = ["g", "r", "i", "z"]
    if args.bb == "LS":
        bands = ["g", "r", "z"]
    sel = np.ones(len(d), dtype=bool)
    for band in bands:
        key = "forced_nexp_{}".format(band)
        if (args.bb == "HSC") & (band in ["r", "i"]):
            key2 = "forced_nexp_{}2".format(band)
            sel &= ((d[key] > 0) & (d[key] < 999999)) | (
                (d[key2] > 0) & (d[key2] < 999999)
            )
        else:
            sel &= (d[key] > 0) & (d[key] < 999999)
    d = d[sel]

    # AR healpix pixels
    pixs = hp.ang2pix(
        args.nside, np.radians(90.0 - d["dec"]), np.radians(d["ra"]), nest=nest
    )
    unq_pixs = np.unique(pixs)

    # AR initialize hp Table
    hpd = Table()
    hpd.meta["HPXNSID"], hpd.meta["HPXNEST"] = args.nside, nest
    npix = hp.nside2npix(args.nside)
    hpd["HPXPIXEL"] = np.arange(npix, dtype=int)
    thetas, phis = hp.pix2ang(args.nside, hpd["HPXPIXEL"], nest=nest)
    hpd["RA"], hpd["DEC"] = np.degrees(phis), 90.0 - np.degrees(thetas)
    # AR restrict to relevant pixels
    hpd.meta["PHOTFN"] = photfn
    if args.bb == "HSC":
        hpd.meta[
            "SEL"
        ] = "(brick_primary) & (maskbits==0) & (nobs_g>0) and (nobs_r>0 or nobs_r2>0) and (nobs_i>0 or nobs_i2>0) and (nobs_z>0)"
    if args.bb == "LS":
        hpd.meta[
            "SEL"
        ] = "(brick_primary) & (maskbits==0) & (nobs_g>0) and (nobs_r>0) and (nobs_z>0)"
    sel = np.in1d(hpd["HPXPIXEL"], unq_pixs)
    hpd = hpd[sel]
    hpd.write(args.outfn, overwrite=args.overwrite)


if __name__ == "__main__":
    main()
