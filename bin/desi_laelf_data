#!/usr/bin/env python

"""
Script used for the HEPAP preparatory study, to validate the LF.
"""

from time import time
import os
from desihiz.hizmerge_io import match_coord
import numpy as np
import fitsio
from astropy.table import Table
from astropy.io import fits
from desihiz.hizmerge_io import match_coord
from desihiz.suprime_analysis import get_bug2ok_mags, get_selection_maglims
from desihiz.laelf_data import (
    get_phot_fn,
    get_spec_fn,
    get_radecbox,
    get_filt_infos,
    get_minefftime,
    get_targ_radecs,
    get_sel_infos,
    make_plot,
)
from desihiz.laelf_utils import allowed_lfsrcs
from desiutil.log import get_logger
from argparse import ArgumentParser

log = get_logger()


def parse():

    parser = ArgumentParser()
    parser.add_argument(
        "--outroot",
        help="output root (default=None)",
        type=str,
        required=True,
        default=None,
    )
    parser.add_argument(
        "--survey",
        help="survey (default=odin)",
        type=str,
        choices=["suprime_djs", "suprime_ad", "odin"],
        default="odin",
    )
    parser.add_argument(
        "--field",
        help="field (default=xmmlss)",
        type=str,
        choices=["cosmos", "xmmlss"],
        default="xmmlss",
    )
    parser.add_argument(
        "--lfsrc",
        help="LF to be plotted (default=anand_variable)",
        type=str,
        choices=allowed_lfsrcs,
        default="anand_variable",
    )
    parser.add_argument(
        "--viqualcut",
        help="secure VI: VI_QUALITY>=viqualcut (default=2.5)",
        type=float,
        default=2.5,
    )
    parser.add_argument(
        "--overwrite",
        help="overwrite files",
        action="store_true",
    )
    args = parser.parse_args()
    for kwargs in args._get_kwargs():
        log.info("{}\t{}".format(kwargs[0], kwargs[1]))
    return args


def main():

    args = parse()

    # filters infos
    filts, _, filtnames, _ = get_filt_infos(args.survey, args.field)
    log.info("filts = {}".format(filts))
    nfilt = len(filtnames)

    # area
    ramin, ramax, decmin, decmax = get_radecbox(args.survey, args.field)
    area = (ramax - ramin) * (decmax - decmin)
    log.info(
        "(ramin, ramax, decmin, decmax) = ({}, {}, {}, {})".format(
            ramin, ramax, decmin, decmax
        )
    )
    log.info("area = {:.1f} deg2".format(area))

    # phot
    pfn = get_phot_fn(args.survey, args.field)
    d = Table.read(pfn)
    sel = (
        (d["ra"] > ramin)
        & (d["ra"] < ramax)
        & (d["dec"] > decmin)
        & (d["dec"] < decmax)
    )
    d = d[sel]
    sel = d["maskbits"] == 0
    d = d[sel]

    for key in d.colnames:

        d[key].name = key.upper().replace("FORCED_MEAN_", "").replace("FORCED_", "")

    # rough area accounting for the masked regions..
    area *= sel.mean()
    log.info("area (accounting for MASKBITS=0) = {:.1f} deg2".format(area))

    # spec targs (we cut phot on the spec. targets)
    sel = np.zeros(len(d), dtype=bool)

    for filt in filtnames:

        ras, decs = get_targ_radecs(
            args.survey, args.field, filt, ramin, ramax, decmin, decmax
        )
        iid, iis, _, _, _ = match_coord(d["RA"], d["DEC"], ras, decs, search_radius=1.0)
        # print("targ\t{}\t{}/{}\t{:.2f}".format(filt, iid.size, ras.size, iid.size / ras.size))
        d["TARG_{}".format(filt)] = False
        d["TARG_{}".format(filt)][iid] = True
        sel |= d["TARG_{}".format(filt)]

    d = d[sel]

    # spec obs + min efftime
    minefftime = get_minefftime(args.survey)
    sfn = get_spec_fn(args.survey)
    s = Table.read(sfn, "SPECINFO")
    sel = (
        (s["TARGET_RA"] > ramin)
        & (s["TARGET_RA"] < ramax)
        & (s["TARGET_DEC"] > decmin)
        & (s["TARGET_DEC"] < decmax)
    )
    sel &= s["EFFTIME_SPEC"] > minefftime
    s = s[sel]
    # match to targets
    iid, iis, _, _, _ = match_coord(
        d["RA"], d["DEC"], s["TARGET_RA"], s["TARGET_DEC"], search_radius=1.0
    )
    # print("spec\t{}/{}\t{:.2f}".format(iid.size, len(s), iid.size / len(s)))

    for filt in filtnames:

        d["SPEC_{}".format(filt)] = False
        d["SPEC_{}".format(filt)][iid] = s[filt.upper()][iis]
        ntarg = d["TARG_{}".format(filt)].sum()
        nspec = d["SPEC_{}".format(filt)].sum()
        # print("{}\t{}/{}\t{:.2f}".format(filt, nspec, ntarg, nspec / ntarg))

    for key in ["VI", "VI_QUALITY", "VI_Z", "VI_COMMENTS"]:

        d[key] = np.zeros_like(s[key], shape=(len(d),))
        d[key][iid] = s[key][iis]

    # storing info in the header
    d.meta["SURVEY"] = args.survey
    d.meta["FIELD"] = args.field
    d.meta["PHOTFN"], d.meta["SPECFN"] = pfn, sfn
    d.meta["RAMIN"], d.meta["RAMAX"], d.meta["DECMIN"], d.meta["DECMAX"] = (
        ramin,
        ramax,
        decmin,
        decmax,
    )
    d.meta["AREA"] = area
    d.meta["MINEFF"] = minefftime
    d.write("{}.fits".format(args.outroot), overwrite=args.overwrite)

    # make plot
    make_plot(d, "{}.png".format(args.outroot), args.viqualcut, lfsrc=args.lfsrc)


if __name__ == "__main__":
    main()
